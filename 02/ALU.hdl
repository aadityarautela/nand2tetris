// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/02/ALU.hdl

/**
 * The ALU (Arithmetic Logic Unit).
 * Computes one of the following functions:
 * x+y, x-y, y-x, 0, 1, -1, x, y, -x, -y, !x, !y,
 * x+1, y+1, x-1, y-1, x&y, x|y on two 16-bit inputs, 
 * according to 6 input bits denoted zx,nx,zy,ny,f,no.
 * In addition, the ALU computes two 1-bit outputs:
 * if the ALU output == 0, zr is set to 1; otherwise zr is set to 0;
 * if the ALU output < 0, ng is set to 1; otherwise ng is set to 0.
 */

// Implementation: the ALU logic manipulates the x and y inputs
// and operates on the resulting values, as follows:
// if (zx == 1) set x = 0        // 16-bit constant
// if (nx == 1) set x = !x       // bitwise not
// if (zy == 1) set y = 0        // 16-bit constant
// if (ny == 1) set y = !y       // bitwise not
// if (f == 1)  set out = x + y  // integer 2's complement addition
// if (f == 0)  set out = x & y  // bitwise and
// if (no == 1) set out = !out   // bitwise not
// if (out == 0) set zr = 1
// if (out < 0) set ng = 1

CHIP ALU {
    IN  
        x[16], y[16],  // 16-bit inputs        
        zx, // zero the x input?
        nx, // negate the x input?
        zy, // zero the y input?
        ny, // negate the y input?
        f,  // compute out = x + y (if 1) or x & y (if 0)
        no; // negate the out output?

    OUT 
        out[16], // 16-bit output
        zr, // 1 if (out == 0), 0 otherwise
        ng; // 1 if (out < 0),  0 otherwise

    PARTS:

    //X Precalc

    Not(in=zx,out=notzx);
    And16(a[0]=x[0],a[1]=x[1],a[2]=x[2],a[3]=x[3],
    a[4]=x[4],a[5]=x[5],a[6]=x[6],a[7]=x[7],
    a[8]=x[8],a[9]=x[9],a[10]=x[10],a[11]=x[11],
    a[12]=x[12],a[13]=x[13],a[14]=x[14],a[15]=x[15],
    b[0]=notzx,b[1]=notzx,b[2]=notzx,b[3]=notzx,
    b[4]=notzx,b[5]=notzx,b[6]=notzx,b[7]=notzx,
    b[8]=notzx,b[9]=notzx,b[10]=notzx,b[11]=notzx,
    b[12]=notzx,b[13]=notzx,b[14]=notzx,b[15]=notzx,
    out[0]=xandnotzx0,out[1]=xandnotzx1,out[2]=xandnotzx2,out[3]=xandnotzx3,
    out[4]=xandnotzx4,out[5]=xandnotzx5,out[6]=xandnotzx6,out[7]=xandnotzx7,
    out[8]=xandnotzx8,out[9]=xandnotzx9,out[10]=xandnotzx10,out[11]=xandnotzx11,
    out[12]=xandnotzx12,out[13]=xandnotzx13,out[14]=xandnotzx14,out[15]=xandnotzx15);

    Xor16(a[0]=xandnotzx0,a[1]=xandnotzx1,a[2]=xandnotzx2,a[3]=xandnotzx3,
    a[4]=xandnotzx4,a[5]=xandnotzx5,a[6]=xandnotzx6,a[7]=xandnotzx7,
    a[8]=xandnotzx8,a[9]=xandnotzx9,a[10]=xandnotzx10,a[11]=xandnotzx11,
    a[12]=xandnotzx12,a[13]=xandnotzx13,a[14]=xandnotzx14,a[15]=xandnotzx15,
    b[0]=nx,b[1]=nx,b[2]=nx,b[3]=nx,
    b[4]=nx,b[5]=nx,b[6]=nx,b[7]=nx,
    b[8]=nx,b[9]=nx,b[10]=nx,b[11]=nx,
    b[12]=nx,b[13]=nx,b[14]=nx,b[15]=nx,
    out[0]=xandnotzxxornx0,out[1]=xandnotzxxornx1,out[2]=xandnotzxxornx2,out[3]=xandnotzxxornx3,
    out[4]=xandnotzxxornx4,out[5]=xandnotzxxornx5,out[6]=xandnotzxxornx6,out[7]=xandnotzxxornx7,
    out[8]=xandnotzxxornx8,out[9]=xandnotzxxornx9,out[10]=xandnotzxxornx10,out[11]=xandnotzxxornx11,
    out[12]=xandnotzxxornx12,out[13]=xandnotzxxornx13,out[14]=xandnotzxxornx14,out[15]=xandnotzxxornx15);

    //Y Precalc

    Not(in=zy,out=notzy);
    And16(a[0]=y[0],a[1]=y[1],a[2]=y[2],a[3]=y[3],
    a[4]=y[4],a[5]=y[5],a[6]=y[6],a[7]=y[7],
    a[8]=y[8],a[9]=y[9],a[10]=y[10],a[11]=y[11],
    a[12]=y[12],a[13]=y[13],a[14]=y[14],a[15]=y[15],
    b[0]=notzy,b[1]=notzy,b[2]=notzy,b[3]=notzy,
    b[4]=notzy,b[5]=notzy,b[6]=notzy,b[7]=notzy,
    b[8]=notzy,b[9]=notzy,b[10]=notzy,b[11]=notzy,
    b[12]=notzy,b[13]=notzy,b[14]=notzy,b[15]=notzy,
    out[0]=yandnotzy0,out[1]=yandnotzy1,out[2]=yandnotzy2,out[3]=yandnotzy3,
    out[4]=yandnotzy4,out[5]=yandnotzy5,out[6]=yandnotzy6,out[7]=yandnotzy7,
    out[8]=yandnotzy8,out[9]=yandnotzy9,out[10]=yandnotzy10,out[11]=yandnotzy11,
    out[12]=yandnotzy12,out[13]=yandnotzy13,out[14]=yandnotzy14,out[15]=yandnotzy15);

    Xor16(a[0]=yandnotzy0,a[1]=yandnotzy1,a[2]=yandnotzy2,a[3]=yandnotzy3,
    a[4]=yandnotzy4,a[5]=yandnotzy5,a[6]=yandnotzy6,a[7]=yandnotzy7,
    a[8]=yandnotzy8,a[9]=yandnotzy9,a[10]=yandnotzy10,a[11]=yandnotzy11,
    a[12]=yandnotzy12,a[13]=yandnotzy13,a[14]=yandnotzy14,a[15]=yandnotzy15,
    b[0]=ny,b[1]=ny,b[2]=ny,b[3]=ny,
    b[4]=ny,b[5]=ny,b[6]=ny,b[7]=ny,
    b[8]=ny,b[9]=ny,b[10]=ny,b[11]=ny,
    b[12]=ny,b[13]=ny,b[14]=ny,b[15]=ny,
    out[0]=yandnotzyxorny0,out[1]=yandnotzyxorny1,out[2]=yandnotzyxorny2,out[3]=yandnotzyxorny3,
    out[4]=yandnotzyxorny4,out[5]=yandnotzyxorny5,out[6]=yandnotzyxorny6,out[7]=yandnotzyxorny7,
    out[8]=yandnotzyxorny8,out[9]=yandnotzyxorny9,out[10]=yandnotzyxorny10,out[11]=yandnotzyxorny11,
    out[12]=yandnotzyxorny12,out[13]=yandnotzyxorny13,out[14]=yandnotzyxorny14,out[15]=yandnotzyxorny15);

    //Add X Y
    
    Add16(a[0]=xandnotzxxornx0,a[1]=xandnotzxxornx1,a[2]=xandnotzxxornx2,a[3]=xandnotzxxornx3,
    a[4]=xandnotzxxornx4,a[5]=xandnotzxxornx5,a[6]=xandnotzxxornx6,a[7]=xandnotzxxornx7,
    a[8]=xandnotzxxornx8,a[9]=xandnotzxxornx9,a[10]=xandnotzxxornx10,a[11]=xandnotzxxornx11,
    a[12]=xandnotzxxornx12,a[13]=xandnotzxxornx13,a[14]=xandnotzxxornx14,a[15]=xandnotzxxornx15,
    b[0]=yandnotzyxorny0,b[1]=yandnotzyxorny1,b[2]=yandnotzyxorny2,b[3]=yandnotzyxorny3,
    b[4]=yandnotzyxorny4,b[5]=yandnotzyxorny5,b[6]=yandnotzyxorny6,b[7]=yandnotzyxorny7,
    b[8]=yandnotzyxorny8,b[9]=yandnotzyxorny9,b[10]=yandnotzyxorny10,b[11]=yandnotzyxorny11,
    b[12]=yandnotzyxorny12,b[13]=yandnotzyxorny13,b[14]=yandnotzyxorny14,b[15]=yandnotzyxorny15,
    out[0]=xplusy0,out[1]=xplusy1,out[2]=xplusy2,out[3]=xplusy3,
    out[4]=xplusy4,out[5]=xplusy5,out[6]=xplusy6,out[7]=xplusy7,
    out[8]=xplusy8,out[9]=xplusy9,out[10]=xplusy10,out[11]=xplusy11,
    out[12]=xplusy12,out[13]=xplusy13,out[14]=xplusy14,out[15]=xplusy15);

    // X AND Y

    And16(a[0]=xandnotzxxornx0,a[1]=xandnotzxxornx1,a[2]=xandnotzxxornx2,a[3]=xandnotzxxornx3,
    a[4]=xandnotzxxornx4,a[5]=xandnotzxxornx5,a[6]=xandnotzxxornx6,a[7]=xandnotzxxornx7,
    a[8]=xandnotzxxornx8,a[9]=xandnotzxxornx9,a[10]=xandnotzxxornx10,a[11]=xandnotzxxornx11,
    a[12]=xandnotzxxornx12,a[13]=xandnotzxxornx13,a[14]=xandnotzxxornx14,a[15]=xandnotzxxornx15,
    b[0]=yandnotzyxorny0,b[1]=yandnotzyxorny1,b[2]=yandnotzyxorny2,b[3]=yandnotzyxorny3,
    b[4]=yandnotzyxorny4,b[5]=yandnotzyxorny5,b[6]=yandnotzyxorny6,b[7]=yandnotzyxorny7,
    b[8]=yandnotzyxorny8,b[9]=yandnotzyxorny9,b[10]=yandnotzyxorny10,b[11]=yandnotzyxorny11,
    b[12]=yandnotzyxorny12,b[13]=yandnotzyxorny13,b[14]=yandnotzyxorny14,b[15]=yandnotzyxorny15,
    out[0]=xandy0,out[1]=xandy1,out[2]=xandy2,out[3]=xandy3,
    out[4]=xandy4,out[5]=xandy5,out[6]=xandy6,out[7]=xandy7,
    out[8]=xandy8,out[9]=xandy9,out[10]=xandy10,out[11]=xandy11,
    out[12]=xandy12,out[13]=xandy13,out[14]=xandy14,out[15]=xandy15);

    //f
    Not(in=f, out=notf);

    // XPLUSY AND F
    And16(a[0]=xplusy0,a[1]=xplusy1,a[2]=xplusy2,a[3]=xplusy3,
    a[4]=xplusy4,a[5]=xplusy5,a[6]=xplusy6,a[7]=xplusy7,
    a[8]=xplusy8,a[9]=xplusy9,a[10]=xplusy10,a[11]=xplusy11,
    a[12]=xplusy12,a[13]=xplusy13,a[14]=xplusy14,a[15]=xplusy15,
    b[0]=f,b[1]=f,b[2]=f,b[3]=f,
    b[4]=f,b[5]=f,b[6]=f,b[7]=f,
    b[8]=f,b[9]=f,b[10]=f,b[11]=f,
    b[12]=f,b[13]=f,b[14]=f,b[15]=f,
    out[0]=xplusyandf0,out[1]=xplusyandf1,out[2]=xplusyandf2,out[3]=xplusyandf3,
    out[4]=xplusyandf4,out[5]=xplusyandf5,out[6]=xplusyandf6,out[7]=xplusyandf7,
    out[8]=xplusyandf8,out[9]=xplusyandf9,out[10]=xplusyandf10,out[11]=xplusyandf11,
    out[12]=xplusyandf12,out[13]=xplusyandf13,out[14]=xplusyandf14,out[15]=xplusyandf15);

    // XANDY AND NOTF
    And16(a[0]=xandy0,a[1]=xandy1,a[2]=xandy2,a[3]=xandy3,
    a[4]=xandy4,a[5]=xandy5,a[6]=xandy6,a[7]=xandy7,
    a[8]=xandy8,a[9]=xandy9,a[10]=xandy10,a[11]=xandy11,
    a[12]=xandy12,a[13]=xandy13,a[14]=xandy14,a[15]=xandy15,
    b[0]=notf,b[1]=notf,b[2]=notf,b[3]=notf,
    b[4]=notf,b[5]=notf,b[6]=notf,b[7]=notf,
    b[8]=notf,b[9]=notf,b[10]=notf,b[11]=notf,
    b[12]=notf,b[13]=notf,b[14]=notf,b[15]=notf,
    out[0]=xplusyandnotf0,out[1]=xplusyandnotf1,out[2]=xplusyandnotf2,out[3]=xplusyandnotf3,
    out[4]=xplusyandnotf4,out[5]=xplusyandnotf5,out[6]=xplusyandnotf6,out[7]=xplusyandnotf7,
    out[8]=xplusyandnotf8,out[9]=xplusyandnotf9,out[10]=xplusyandnotf10,out[11]=xplusyandnotf11,
    out[12]=xplusyandnotf12,out[13]=xplusyandnotf13,out[14]=xplusyandnotf14,out[15]=xplusyandnotf15);

    //OR ON ABOVE VALUES
    Or16(a[0]=xplusyandf0,a[1]=xplusyandf1,a[2]=xplusyandf2,a[3]=xplusyandf3,
    a[4]=xplusyandf4,a[5]=xplusyandf5,a[6]=xplusyandf6,a[7]=xplusyandf7,
    a[8]=xplusyandf8,a[9]=xplusyandf9,a[10]=xplusyandf10,a[11]=xplusyandf11,
    a[12]=xplusyandf12,a[13]=xplusyandf13,a[14]=xplusyandf14,a[15]=xplusyandf15,
    b[0]=xplusyandnotf0,b[1]=xplusyandnotf1,b[2]=xplusyandnotf2,b[3]=xplusyandnotf3,
    b[4]=xplusyandnotf4,b[5]=xplusyandnotf5,b[6]=xplusyandnotf6,b[7]=xplusyandnotf7,
    b[8]=xplusyandnotf8,b[9]=xplusyandnotf9,b[10]=xplusyandnotf10,b[11]=xplusyandnotf11,
    b[12]=xplusyandnotf12,b[13]=xplusyandnotf13,b[14]=xplusyandnotf14,b[15]=xplusyandnotf15,
    out[0]=penultimateout0,out[1]=penultimateout1,out[2]=penultimateout2,out[3]=penultimateout3,
    out[4]=penultimateout4,out[5]=penultimateout5,out[6]=penultimateout6,out[7]=penultimateout7,
    out[8]=penultimateout8,out[9]=penultimateout9,out[10]=penultimateout10,out[11]=penultimateout11,
    out[12]=penultimateout12,out[13]=penultimateout13,out[14]=penultimateout14,out[15]=penultimateout15);

    // IF no FLIP BITS
    Xor16(a[0]=penultimateout0,a[1]=penultimateout1,a[2]=penultimateout2,a[3]=penultimateout3,
    a[4]=penultimateout4,a[5]=penultimateout5,a[6]=penultimateout6,a[7]=penultimateout7,
    a[8]=penultimateout8,a[9]=penultimateout9,a[10]=penultimateout10,a[11]=penultimateout11,
    a[12]=penultimateout12,a[13]=penultimateout13,a[14]=penultimateout14,a[15]=penultimateout15,
    b[0]=no,b[1]=no,b[2]=no,b[3]=no,
    b[4]=no,b[5]=no,b[6]=no,b[7]=no,
    b[8]=no,b[9]=no,b[10]=no,b[11]=no,
    b[12]=no,b[13]=no,b[14]=no,b[15]=no,
    out[0]=postprocessedout0,out[1]=postprocessedout1,out[2]=postprocessedout2,out[3]=postprocessedout3,
    out[4]=postprocessedout4,out[5]=postprocessedout5,out[6]=postprocessedout6,out[7]=postprocessedout7,
    out[8]=postprocessedout8,out[9]=postprocessedout9,out[10]=postprocessedout10,out[11]=postprocessedout11,
    out[12]=postprocessedout12,out[13]=postprocessedout13,out[14]=postprocessedout14,out[15]=postprocessedout15);

    //CALC zr
    Or8Way(in[0]=postprocessedout0,in[1]=postprocessedout1,in[2]=postprocessedout2,in[3]=postprocessedout3,
    in[4]=postprocessedout4,in[5]=postprocessedout5,in[6]=postprocessedout6,in[7]=postprocessedout7,
    out=notzr1);
    Or8Way(in[0]=postprocessedout8,in[1]=postprocessedout9,in[2]=postprocessedout10,in[3]=postprocessedout11,
    in[4]=postprocessedout12,in[5]=postprocessedout13,in[6]=postprocessedout14,in[7]=postprocessedout15,
    out=notzr2);
    Or(a=notzr1, b=notzr2, out=notzr);
    Not(in=notzr, out=zr);

    //CALC ng
    And(a=postprocessedout15, b=true, out=ng);

    //OUTPUT
    And16(a[0]=postprocessedout0,a[1]=postprocessedout1,a[2]=postprocessedout2,a[3]=postprocessedout3,
    a[4]=postprocessedout4,a[5]=postprocessedout5,a[6]=postprocessedout6,a[7]=postprocessedout7,
    a[8]=postprocessedout8,a[9]=postprocessedout9,a[10]=postprocessedout10,a[11]=postprocessedout11,
    a[12]=postprocessedout12,a[13]=postprocessedout13,a[14]=postprocessedout14,a[15]=postprocessedout15,
    b[0]=true,b[1]=true,b[2]=true,b[3]=true,
    b[4]=true,b[5]=true,b[6]=true,b[7]=true,
    b[8]=true,b[9]=true,b[10]=true,b[11]=true,
    b[12]=true,b[13]=true,b[14]=true,b[15]=true,
    out[0]=out[0],out[1]=out[1],out[2]=out[2],out[3]=out[3],
    out[4]=out[4],out[5]=out[5],out[6]=out[6],out[7]=out[7],
    out[8]=out[8],out[9]=out[9],out[10]=out[10],out[11]=out[11],
    out[12]=out[12],out[13]=out[13],out[14]=out[14],out[15]=out[15]);

}