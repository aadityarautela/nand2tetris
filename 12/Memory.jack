// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/12/Memory.jack

/**
 * This library provides two services: direct access to the computer's main
 * memory (RAM), and allocation and recycling of memory blocks. The Hack RAM
 * consists of 32,768 words, each holding a 16-bit binary number.
 */ 
class Memory {
    static Array memory;
    static Array free_list;
    static array NO_BLOCK;

    static int FL_LEN;
    static int FL_NEXT;

    static int ALLOC_SIZE;

    /** Initializes the class. */
    function void init() {
        let memory=0;
        let free_list=2048;
        let NO_BLOCK=16384;
        let FL_LEN=0;
        let FL_NEXT=1;
        let ALLOC_SIZE=-1;
        let free_list[FL_LEN]=14336;
        let free_list[FL_NEXT]=null;
        return;
    }

    /** Returns the RAM value at the given address. */
    function int peek(int address) {
        return memory[address];
    }

    /** Sets the RAM value at the given address to the given value. */
    function void poke(int address, int value) {
        let memory[address]=value;
        return;
    }

    /** Finds an available RAM block of the given size and returns
     *  a reference to its base address. */
    function int alloc(int size) {
        var Array prev_block;
        var Array found_block;

        let prev_block = Memory.bestfit(size);
        if(prev_block = NO_BLOCK){
            let found_block = null;
        }
        else{
            if(prev_block=null){
                let found_block=free_list;
                let free_list=Memory.do_alloc(found_block,size);
            }
            else{
                let found_block=prev_block[FL_NEXT];
                let prev_block[FL_NEXT]=Memory.do_alloc(found_block,size);
            }
        }
        return found_block+1;
    }

    function Array bestfit(int size){
        var Array best_block;
        var Array prev_block;
        var Array curr_block;
        var int best_size;
        var int curr_size;

        let best_block = NO_BLOCK;
        let best_size = 14336;
        let curr_block = free_list;
        let prev_block = null;

        while(~(curr_block=null)){
            let curr_size = curr_block[FL_LEN]-1;
            if(~(curr_size<size) & (curr_size<best_size)){
                let best_block=prev_block;
                let best_size=curr_size;
            }
            let prev_block=curr_block;
            let curr_block=curr_block[FL_NEXT];
        }
        return best_block;
    }

    function Array do_alloc(Array found_block,int size){
        var Array next_block;
        var int block_size;

        if(found_block[FL_LEN]>(size+3)){
            let next_block=found_block+size+1;
            let next_block[FL_NEXT]=found_block[FL_NEXT];
            let next_block[FL_LEN]=found_block[FL_LEN]-(next_block-found_block);
            let found_block=found_block+1;
            let found_block[ALLOC_SIZE]=size+1;
        }
        else{
            let next_block=found_block[FL_NEXT];
            let block_size=found_block[FL_LEN];
            let found_block=found_block+1;
            let found_block[ALLOC_SIZE]=block_size;
        }
        return next_block;
    }

    /** De-allocates the given object (cast as an array) by making
     *  it available for future allocations. */
    function void deAlloc(Array o) {
        var int alloc_size;
        var Array prev_block;
        var Array next_block;

        let alloc_size=o[ALLOC_SIZE];
        let o=o-1;
        let prev_block=Memory.find_prev_free(o);

        if(prev_block=null){
            let o[FL_LEN]=alloc_size;
            let o[FL_NEXT]=free_list;
            let free_list=o;
            let prev_block=o;
        }
        else{
            if((prev_block+prev_block[FL_LEN])=o){
                let prev_block[FL_LEN] = prev_block[FL_LEN]+alloc_size;
            }
            else{
                let o[FL_LEN]=alloc_size;
                let o[FL_NEXT]=prev_block[FL_NEXT];
                let prev_block[FL_NEXT]=o;
                let prev_block=o;
            }
        }
        if((prev_block+prev_block[FL_LEN])=prev_block[FL_NEXT]){
            let next_block=prev_block[FL_NEXT];
            let prev_block[FL_LEN]=prev_block[FL_LEN]+next_block[FL_LEN];
            let prev_block[FL_NEXT]=next_block[FL_NEXT];
        }
        return;
    }    

    function Array find_prev_free(Array object){
        var Array block;
        if(free_list>object){
            return null;
        }
        let block = free_list;
        while(~(block[FL_NEXT]=null)&(block[FL_NEXT]<object)){
            let block = block[FL_NEXT];
        }
        return block;
    }
}
