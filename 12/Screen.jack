// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/12/Screen.jack

/**
 * A library of functions for displaying graphics on the screen.
 * The Hack physical screen consists of 512 rows (indexed 0..511, top to bottom)
 * of 256 pixels each (indexed 0..255, left to right). The top left pixel on 
 * the screen is indexed (0,0).
 */
class Screen {
    static Array screen;
    static boolean curr_color;
    static int white_px;
    static int black_px;
    static boolean white;
    static boolean black;

    /** Initializes the Screen. */
    function void init() {
        let screen = 16384;
        let white = false;
        let black = true;
        let white_px = 0;
        let black_px = 1;
        let curr_color = black;
        return;
    }

    /** Erases the entire screen. */
    function void clearScreen() {
        var int i;
        let i = 0;
        while(i<8192){
            let screen[i] = white;
        }
        return;
    }

    /** Sets the current color, to be used for all subsequent drawXXX commands.
     *  Black is represented by true, white by false. */
    function void setColor(boolean b) {
        let curr_color = b;
        return;
    }

    /** Draws the (x,y) pixel, using the current color. */
    function void drawPixel(int x, int y) {
        var int addr;
        var int mask;
        let addr = (y*32) + (x/16);
        let mask = Math.two_to_the(x&15);
        return;
    }

    /** Draws a line from pixel (x1,y1) to pixel (x2,y2), using the current color. */
    function void drawLine(int x1, int y1, int x2, int y2) {
        var int dx,dy;
        var int tmp;
        if(x1>x2){
            let tmp = x1;
            let x1 = x2;
            let x2 = tmp;
            let tmp = y1;
            let y1 = y2;
            let y2 = tmp;
        }
        let dx = x2-x1;
        let dy = y2-y1;
        if(dx = 0){
            do Screen.drawVL(x1,y1,y2);
        }
        else{
            if(dy=0){
                do Screen.drawHL(x1,x2,y1);
            }
            else{
                do Screen.drawDL(x1,y1,x2,y2,dx,dy);
            }
        }
        return;
    }

    function void drawVL(int x,int y1,int y2){
        var int tmp;
        if(y1>y2){
            let tmp = y1;
            let y1 = y2;
            let y2 = tmp;
        }
        while(~(y1>y2)){
            do Screen.drawPixel(x,y1);
            let y1 = y1 + 1;
        }
        return;
    }

    function void drawHL(int x1,int x2,int y){
        var int start_addr, end_addr;
        var int x1mod16, x2mod16;
        var int newx2;
        var int newx1;

        let x1mod16 = x1 & 15;
        let x2mod16 = x2 & 15;
        let start_addr = (y*32) + (x1/16);
        let end_addr = (y*32) + (x2/16) + (x2mod16=0);

        if(start_addr = end_addr){
            while(~(x1>x2)){
                do Screen.drawPixel(x1,y);
                let x1 = x1+1;
            }
        }
        else{
            if(~(x1mod16=0)){
                let start_addr = start_addr + 1;
                let newx2 = x1+16-x1mod16;

                while(~(x1>newx2)){
                    do Screen.drawPixel(x1,y);
                    let x1 = x1+1;
                }
            }
            if(~(x2mod16=0)){
                let end_addr = end_addr - 1;
                let newx1 = x2-x2mod16;

                while(~(newx1>x2)){
                    do Screen.drawPixel(newx1,y);
                    let newx1 = newx1+1;
                }
            }
            while(~(start_addr>end_addr)){
                let screen[start_addr] = curr_color;
                let start_addr = start_addr + 1;
            }
        }

        return;
    }

    function void drawDL(int x1,int y1,int x2,int y2, int dx,int dy){
        var int a,b;
        var int ady_minus_bdx;
        var int y_inc;

        let a = 0;
        let b = 0;
        let ady_minus_bdx = 0;

        if(dy<0){
            let y_inc = -1;
        }
        else{
            let y_inc = 1;
        }

        while(~(a>dx) & (((y_inc = 1) & ~(b>dy)) | ((y_inc = -1) & ~(b<dy)) ) ) {
            do Screen.drawPixel(x1+a,y1+b);
            if(ady_minus_bdx<0){
                let a=a+1;
                let ady_minus_bdx = ady_minus_bdx + (dy*y_inc);
            }
            else{
                let b = b+y_inc;
                let ady_minus_bdx = ady_minus_bdx - dx;
            }
        }
        return;
    }

    /** Draws a filled rectangle whose top left corner is (x1, y1)
     * and bottom right corner is (x2,y2), using the current color. */
    function void drawRectangle(int x1, int y1, int x2, int y2) {
        var int y;
        let y = y1;
        while(~(y>y2)){
            do Screen.drawHL(x1,x2,y);
            let y = y+1;
        }
        return;
    }

    /** Draws a filled circle of radius r<=181 around (x,y), using the current color. */
    function void drawCircle(int x, int y, int r) {
        var int dx,dy;
        var int r_sq;

        let dy=-r;
        let r_sq = r*r;
        while(~(dy>r)){
            let dx = Math.sqrt(r_sq - (dy*dy));
            do Screen.drawHL(x-dx,x+dx,y+dy);
            let dy = dy+1;
        }
        return;
    }
}
